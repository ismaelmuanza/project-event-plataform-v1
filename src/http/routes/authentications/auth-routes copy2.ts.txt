import { FastifyPluginAsyncZod } from 'fastify-type-provider-zod';
import { z } from 'zod';
import { InMemoryUserRepository } from '@/repositories/in-memory-repository-prisma';
import { AuthenticateUserUseCase } from '@/use-cases/authenticate-user-use-case';
import { PrismaUserRepository } from '@/repositories/prisma-user-repository';

export const JWTSECRET = 'jwtSecretjjehjy343k43k4'

export const authRoutes: FastifyPluginAsyncZod = async (app) => {
    app.post('/sessions', {
        schema: {
            tags: ['Authentication'],
            summary: 'Authenticate a user',
            description: 'Authenticates a user and returns a JWT token.',
            body: z.object({
                email: z.string().email(),
                password: z.string().min(6),
            }),
            response: {
                200: z.object({
                    token: z.string(),
                }),
                401: z.object({
                    message: z.string(),
                }),
            },
        },
    }, async (request, reply) => {

        try {
            const { email, password } = request.body;

            const userRepository = new PrismaUserRepository();

            const authenticateUserUseCase = new AuthenticateUserUseCase(userRepository);

            const token  = await authenticateUserUseCase.execute({ email, password });

            return reply.status(200).send({token});


        } catch (err) {

            if(err instanceof Error) {
                return reply.status(401).send({ message: err.message });
            } 

            throw err;
        }
    });
};