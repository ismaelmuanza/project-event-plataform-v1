import { describe, it, expect, afterAll, beforeAll } from 'vitest';
import { app } from '@/app';
import request from 'supertest';

describe('Register User E2E test', () => {
  beforeAll(async () => {
    await app.ready();
  })

  afterAll(async () => {
    await app.close();
  })

  it.skip('should be able to register a new user', async () => {
    const response = await request(app.server)
      .post('/users')
      .send({
        name: 'John Doe 7',
        email: 'johndoe7@example.com',
        password: 'password123',
      })
      .expect(201)
      .expect('Content-Type', /application\/json/);

    expect(response.body).toEqual({
      user: {
        id: expect.any(String),
        name: 'John Doe 7',
        email: 'johndoe7@example.com',
      },
    });
  });

  it.skip('should return an error if the email is already in use', async () => {
    await request(app.server)
      .post('/users')
      .send({
        name: 'John Doe',
        email: 'johndoe@example.com',
        password: 'password123',
      })
      .expect(201);

    const response = await request(app.server)
      .post('/users')
      .send({
        name: 'Jane Doe',
        email: 'johndoe@example.com',
        password: 'password123',
      })
      .expect(409)
      .expect('Content-Type', /application\/json/);

    expect(response.body).toEqual({
      message: 'User already exists.',
    });
  });

  it.skip('should return an error if the password is too short', async () => {
    const response = await request(app.server)
      .post('/users')
      .send({
        name: 'John Doe',
        email: 'johndoe@example.com',
        password: 'pass',
      })
      .expect(409)
      .expect('Content-Type', /application\/json/);

    expect(response.body).toEqual({
      message: 'User already exists.',
    });
  });
});