import { describe, it, expect, vi, beforeEach } from 'vitest';
import { SendNotificationUseCase } from '@/use-cases/notifications/send-notification-use-case';
import { NotificationService } from '@/services/notification-service';

vi.mock('@/services/notification-service');

describe('SendNotificationUseCase', () => {
  let notificationService: NotificationService;
  let sendNotificationUseCase: SendNotificationUseCase;

  beforeEach(() => {
    notificationService = new NotificationService();
    sendNotificationUseCase = new SendNotificationUseCase(notificationService);

    vi.spyOn(notificationService, 'sendNotification').mockResolvedValue();
  });

  it('should send a notification with valid data', async () => {
    await sendNotificationUseCase.execute({
      userId: 'user-123',
      message: 'This is a test notification.',
      type: 'info',
    });

    expect(notificationService.sendNotification).toHaveBeenCalledWith({
      userId: 'user-123',
      message: 'This is a test notification.',
      type: 'info',
    });
  });

  it('should throw an error if notification data is invalid', async () => {
    await expect(
      sendNotificationUseCase.execute({
        userId: '',
        message: '',
        type: '',
      }),
    ).rejects.toThrow('Invalid notification data.');
  });
});